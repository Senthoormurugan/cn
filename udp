UDP Server : 
// Server side implementation of UDP client-server model 
#include <stdio.h> 
#include <stdlib.h> 
#include <unistd.h> 
#include <string.h> 
#include <sys/types.h> 
#include <sys/socket.h> 
#include <arpa/inet.h> 
#include <netinet/in.h> 
#define PORT 8080 
#define MAXLINE 1024 
// Driver code  
intmain() { 
intsockfd;
char buffer[MAXLINE]; 
char *hello = "Hello from server"; 
structsockaddr_inservaddr, cliaddr; 
// Creating socket file descriptor 
if ( (sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0 ) { perror("socket  creation failed"); 
exit(EXIT_FAILURE); 
} 
memset(&servaddr, 0, sizeof(servaddr)); 
memset(&cliaddr, 0, sizeof(cliaddr)); 
// Filling server information 
servaddr.sin_family = AF_INET; 
// IPv4  
servaddr.sin_addr.s_addr = INADDR_ANY;  
servaddr.sin_port = htons(PORT); 
// Bind the socket with the server address 
if ( bind(sockfd, (conststructsockaddr *)&servaddr, sizeof(servaddr)) <0 ) { 
perror("bind failed"); exit(EXIT_FAILURE); 
} 
intlen, n; 
len = sizeof(cliaddr); //len is value/result 
n = recvfrom(sockfd, (char *)buffer, MAXLINE, 
MSG_WAITALL, ( structsockaddr *) &cliaddr, &len); 
buffer[n] = '\0'; 
printf("Client : %s\n", buffer); 
sendto(sockfd, (const char *)hello, strlen(hello), MSG_CONFIRM,  (conststructsockaddr *) &cliaddr,len); 
printf("Hello message sent.\n"); 
return 0; 
} 
UDP Client : 
// Client side implementation of UDP client-server model #include <stdio.h> 
#include <stdlib.h> 
#include <unistd.h> 
#include <string.h> 
#include <sys/types.h> 
#include <sys/socket.h> 
#include <arpa/inet.h> 
#include <netinet/in.h> #define PORT8080 
#define MAXLINE 1024
// Driver code  
intmain() { 
intsockfd; 
char buffer[MAXLINE]; 
char *hello = "Hello from client"; structsockaddr_in servaddr; // Creating socket file descriptor 
if ( (sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0 ) { perror("socket  creation failed"); exit(EXIT_FAILURE); 
} 
memset(&servaddr, 0, sizeof(servaddr)); 
// Filling server information servaddr.sin_family = AF_INET; servaddr.sin_port  =htons(PORT); 
servaddr.sin_addr.s_addr = INADDR_ANY; 
int n, len; 
sendto(sockfd, (const char *)hello, strlen(hello), MSG_CONFIRM,  (conststructsockaddr *) &servaddr,sizeof(servaddr));  
printf("Hello message sent.\n"); 
n = recvfrom(sockfd, (char *)buffer, MAXLINE, 
MSG_WAITALL, (structsockaddr *) &servaddr, &len); 
buffer[n] = '\0'; 
printf("Server : %s\n", buffer); 
close(sockfd); return 0; 
} 
